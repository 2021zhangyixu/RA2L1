<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Mar 28 11:57:00 2023
<BR><P>
<H3>Maximum Stack Usage =         84 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; SystemInit &rArr; bsp_clock_init &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">bsp_prv_software_delay_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">bsp_prv_software_delay_loop</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[10]">R_IOPORT_Close</a> from r_ioport.o(.text.R_IOPORT_Close) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[f]">R_IOPORT_Open</a> from r_ioport.o(.text.R_IOPORT_Open) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[12]">R_IOPORT_PinCfg</a> from r_ioport.o(.text.R_IOPORT_PinCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[13]">R_IOPORT_PinEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PinEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[14]">R_IOPORT_PinEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PinEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[15]">R_IOPORT_PinRead</a> from r_ioport.o(.text.R_IOPORT_PinRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[16]">R_IOPORT_PinWrite</a> from r_ioport.o(.text.R_IOPORT_PinWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[11]">R_IOPORT_PinsCfg</a> from r_ioport.o(.text.R_IOPORT_PinsCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[17]">R_IOPORT_PortDirectionSet</a> from r_ioport.o(.text.R_IOPORT_PortDirectionSet) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[18]">R_IOPORT_PortEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PortEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[19]">R_IOPORT_PortEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PortEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[1a]">R_IOPORT_PortRead</a> from r_ioport.o(.text.R_IOPORT_PortRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[1b]">R_IOPORT_PortWrite</a> from r_ioport.o(.text.R_IOPORT_PortWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1c]">UART9_callback</a> from usart9.o(.text.UART9_callback) referenced from hal_data.o(.rodata.g_uart9_cfg)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[e]">sci_uart_eri_isr</a> from r_sci_uart.o(.text.sci_uart_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_uart_rxi_isr</a> from r_sci_uart.o(.text.sci_uart_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_uart_tei_isr</a> from r_sci_uart.o(.text.sci_uart_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_uart_txi_isr</a> from r_sci_uart.o(.text.sci_uart_txi_isr) referenced from vector_data.o(.application_vectors)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>

<P><STRONG><a name="[3e]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_rxi_isr
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[43]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[20]"></a>R_BSP_Init_RTC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_clocks.o(.text.R_BSP_Init_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_BSP_Init_RTC &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2c]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[21]"></a>R_BSP_SoftwareDelay</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_delay.o(.text.R_BSP_SoftwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_2_flicker
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_1_flicker
</UL>

<P><STRONG><a name="[24]"></a>R_BSP_WarmStart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_entry.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_BSP_WarmStart &rArr; R_IOPORT_Open &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10]"></a>R_IOPORT_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_Close))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[f]"></a>R_IOPORT_Open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_IOPORT_Open &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[12]"></a>R_IOPORT_PinCfg</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_PinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_IOPORT_PinCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[13]"></a>R_IOPORT_PinEventInputRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[14]"></a>R_IOPORT_PinEventOutputWrite</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PinEventOutputWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[15]"></a>R_IOPORT_PinRead</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[16]"></a>R_IOPORT_PinWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_2_flicker
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_1_flicker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[11]"></a>R_IOPORT_PinsCfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PinsCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_IOPORT_PinsCfg &rArr; r_ioport_pins_config
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[17]"></a>R_IOPORT_PortDirectionSet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PortDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PortDirectionSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[18]"></a>R_IOPORT_PortEventInputRead</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[19]"></a>R_IOPORT_PortEventOutputWrite</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventOutputWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[1a]"></a>R_IOPORT_PortRead</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[1b]"></a>R_IOPORT_PortWrite</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[26]"></a>R_SCI_UART_Open</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, r_sci_uart.o(.text.R_SCI_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_SCI_UART_Open &rArr; r_sci_irq_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART9_Init
</UL>

<P><STRONG><a name="[35]"></a>R_SCI_UART_Write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_sci_uart.o(.text.R_SCI_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART9_callback
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Reset_Handler &rArr; SystemInit &rArr; bsp_clock_init &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[2f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SystemInit &rArr; bsp_clock_init &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[32]"></a>UART9_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart9.o(.text.UART9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART9_Init &rArr; R_SCI_UART_Open &rArr; r_sci_irq_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[1c]"></a>UART9_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usart9.o(.text.UART9_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART9_callback &rArr; R_SCI_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Write
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Agreement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart9_cfg)
</UL>
<P><STRONG><a name="[34]"></a>UART_Agreement</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart9.o(.text.UART_Agreement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Agreement
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART9_callback
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_common.o(.text.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART9_Init
</UL>

<P><STRONG><a name="[2a]"></a>bsp_clock_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_clock_init &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_operating_mode_opccr_set
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>bsp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[44]"></a>bsp_init_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal), UNUSED)

<P><STRONG><a name="[30]"></a>bsp_irq_cfg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23]"></a>bsp_prv_software_delay_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_delay.o(.text.bsp_prv_software_delay_loop))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart9.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; R_SCI_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[38]"></a>hal_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_entry.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_entry &rArr; UART9_Init &rArr; R_SCI_UART_Open &rArr; r_sci_irq_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_2_flicker
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_1_flicker
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART9_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>led_1_flicker</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led.o(.text.led_1_flicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = led_1_flicker &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[3b]"></a>led_2_flicker</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led.o(.text.led_2_flicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = led_2_flicker &rArr; R_BSP_SoftwareDelay &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; hal_entry &rArr; UART9_Init &rArr; R_SCI_UART_Open &rArr; r_sci_irq_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[e]"></a>sci_uart_eri_isr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, r_sci_uart.o(.text.sci_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sci_uart_eri_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_uart_rxi_isr</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, r_sci_uart.o(.text.sci_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sci_uart_rxi_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_uart_tei_isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, r_sci_uart.o(.text.sci_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_uart_tei_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_uart_txi_isr</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, r_sci_uart.o(.text.sci_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_uart_txi_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[39]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; R_SCI_UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[36]"></a>bsp_prv_operating_mode_opccr_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp_clocks.o(.text.bsp_prv_operating_mode_opccr_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[25]"></a>r_ioport_pins_config</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, r_ioport.o(.text.r_ioport_pins_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_ioport_pins_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinsCfg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>

<P><STRONG><a name="[27]"></a>r_sci_irq_cfg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, r_sci_uart.o(.text.r_sci_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_sci_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_UART_Open
</UL>

<P><STRONG><a name="[3c]"></a>r_sci_uart_call_callback</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, r_sci_uart.o(.text.r_sci_uart_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = r_sci_uart_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_txi_isr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
